import subprocess
from fastapi import FastAPI, WebSocket
import psutil
import json
import asyncio

app = FastAPI()

def get_network_connections():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏."""
    connections = []
    pid_map = {p.info['pid']: p.info['name'] for p in psutil.process_iter(['pid', 'name'])}

    for conn in psutil.net_connections(kind="inet"):
        if conn.status == "ESTABLISHED" and conn.laddr and conn.raddr:
            pid = conn.pid

            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –ø–æ–∏—Å–∫ PID —á–µ—Ä–µ–∑ lsof, –µ—Å–ª–∏ psutil –Ω–µ –Ω–∞—à–µ–ª –µ–≥–æ
            if not pid:
                try:
                    result = subprocess.run(
                        ["sudo", "lsof", "-i", f"tcp:{conn.laddr.port}"],
                        capture_output=True, text=True
                    )
                    lines = result.stdout.split("\n")
                    for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        parts = line.split()
                        if len(parts) > 1 and parts[1].isdigit():
                            pid = int(parts[1])
                            break
                except Exception as e:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ lsof:", e)

            connections.append({
                "pid": pid if pid else "Unknown",
                "process": pid_map.get(pid, "Unknown"),
                "local_ip": conn.laddr.ip,
                "local_port": conn.laddr.port,
                "remote_ip": conn.raddr.ip,
                "remote_port": conn.raddr.port,
                "status": conn.status
            })

    print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {len(connections)}")
    return connections

async def get_kernel_data():
    """–§–æ—Ä–º–∏—Ä—É–µ–º JSON —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    try:
        while True:
            data = {
                "cpu": psutil.cpu_percent(percpu=True),
                "memory": psutil.virtual_memory().percent,
                "network": get_network_connections(),  # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç—å
                "processes": {p.pid: {"name": p.info["name"], "ppid": p.info["ppid"]} 
                              for p in psutil.process_iter(['pid', 'name', 'ppid'])}
            }
            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {json.dumps(data, indent=2)}")  # –õ–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            yield json.dumps(data)
            await asyncio.sleep(1)
    except asyncio.CancelledError:
        print("üî¥ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
        raise  

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥."""
    await websocket.accept()
    try:
        async for data in get_kernel_data():
            await websocket.send_text(data)
    except asyncio.CancelledError:
        print("üî¥ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ.")
    finally:
        print("üü° WebSocket-–∑–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
